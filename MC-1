// // factorial iter
// function factorial(n) { 
//     return iter(1, 1, n); 
// }

// function iter (product, counter, n) { 
//     return counter > n 
//             ? product 
//             : iter(counter * product, counter + 1, n);
// }

// factorial(4);

// f with constant deferred operations
function f(n) {
    return n <= 1 
            ? 1 
            : n <= 5 
            ? 2 * f(n - 1) 
            : f(n - 2); 
}

f(6);       // zoom to step 56
f(7);       // zoom to step 68
f(14);      // zoom to step 104
f(15);      // zoom to step 116

// for n greater than 5, even number n will have 3 deferred operations
// odd number n will have 4 deferred operations


// Parentheses around lambda expressions
function cube(x) {
    return x * x * x;
}

((x, y, z) => x + y + cube(z))(1, 2, 3);

(x, y, z) => x + y + cube(z)(1, 2, 3);

// // Function Declaration vs Lambda Expression vs Const Declaration
// // f(x,y) = x(1 + xy)^2 + y(1 − y) + (1 + xy)(1 − y)
// // f(x, y) = xa^2 + yb + ab

// function square(x) {
//     return x * x;
// }

// function f(x, y) {
//     function f_helper(a, b) {
//         return x * square(a) + y * b + a * b;
//     }
//     return f_helper(1 + x * y, 1 - y);
// }

// f(3, 4);

// function f_2(x, y) {
//     return ( (a, b) => x * square(a) + y * b + a * b
//           )(1 + x * y, 1 - y);
// }

// f_2(3, 4);

// function f_3(x, y) {
//     const a = 1 + x * y;
//     const b = 1 - y;
//     return x * square(a) + y * b + a * b;
// }

// f_3(3, 4);

// function sample(x, y) {
//     return x + square(y);
// }